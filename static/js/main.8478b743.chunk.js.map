{"version":3,"sources":["hooks/useLocalStorage.js","context/GlobalState.jsx","components/SearchBar.jsx","helpers/getTime.js","components/WeatherIcon.jsx","helpers/celsiusToFahr.js","components/WeatherInfo.jsx","helpers/capitalize.js","helpers/dateBuilder.js","helpers/getTemperature.js","components/WeatherView.jsx","assets/app-logo.png","components/HomeScreen.jsx","helpers/setBackground.js","components/Settings.jsx","App.jsx","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","GlobalContext","createContext","WeatherProvider","props","undefined","weather","setWeather","baseUrl","api","setApi","scale","setScale","Provider","weatherState","apiState","scaleState","children","SearchBar","Search","Input","useContext","query","setQuery","history","useHistory","className","style","marginBottom","id","type","placeholder","onSearch","evt","fetch","then","res","json","result","push","onChange","e","target","enterButton","getTime","d","Date","dt","getTimezoneOffset","timezone","date","hours","getHours","minutes","getMinutes","isDay","sunriseTime","sunriseDate","sys","sunrise","getSunriseTime","sunsetTime","sunsetDate","sunset","getSunsetTime","currentTime","WeatherIcon","main","size","color","celsiusToFahrenheit","temp","Math","round","WeatherInfo","string","currentDate","temperature","current","max","temp_max","min","temp_min","getTemperature","name","country","getDay","getDate","getMonth","getFullYear","opacity","description","toUpperCase","slice","WeatherView","HomeScreen","width","src","logo","preview","setBackground","Settings","Typography","Paragraph","selectedKey","setSelectedKey","location","useLocation","menu","defaultSelectedKeys","selectable","onSelect","theme","Item","to","onClick","icon","LeftOutlined","fontSize","disabled","pathname","Button","shape","SettingOutlined","overlay","App","basename","process","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8478b743.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n  \n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n  \n    return [storedValue, setValue];\n  }","import React, {useState, createContext} from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage'\nexport const GlobalContext = createContext();\n\nexport const WeatherProvider = (props) => {\n  const [weather, setWeather] = useLocalStorage('weather', undefined)\n  const [api, setApi] = useState({\n    key : 'd0382771156e90c34e987d43ebbf59d6',\n    baseUrl : 'https://api.openweathermap.org/data/2.5/'\n  })\n  const [scale, setScale] = useLocalStorage('scale', 'Â°C')\n  return(\n    <GlobalContext.Provider value = {{ weatherState: [weather, setWeather], apiState: [api, setApi], scaleState: [scale, setScale] }}>\n      {props.children}\n    </GlobalContext.Provider>\n  )\n\n}\n","import React, { useState, useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState'\nimport { useHistory} from 'react-router-dom'\nimport { Input } from 'antd'\n\nconst SearchBar = (props) => {\n  const { Search } = Input\n  const { weatherState, apiState } = useContext(GlobalContext)\n  const [weather, setWeather] = weatherState\n  const [api, setApi] = apiState\n  const [query, setQuery] = useState('');\n  let history = useHistory();\n\n  const onSearch = evt => {\n    fetch(api.baseUrl + 'weather?q=' + query + '&appid=' + api.key + '&lang=es')\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result)\n        setQuery('') \n        history.push(\"/weather\");\n      });\n  }\n  return (\n    <div className = 'flex-container'>\n      <div style={{marginBottom: '2rem'}}>\n        <Search id='locationInput' type=\"text\" placeholder='Ingrese la localidad' onSearch={onSearch} onChange={e => setQuery(e.target.value)} value={ query } enterButton />\n      </div>\n\n    </div>\n  )\n}\n\nexport default SearchBar\n\n","export const getTime = (weather) => {\n  let d = new Date()\n  let localTime = d.getTime()\n  let localOffset = d.getTimezoneOffset() * 60000\n  let utc = localTime + localOffset\n  var dt = utc + (1000 * weather.timezone)\n  let date = new Date(dt)\n  return {hours: date.getHours(), minutes:date.getMinutes()}\n}\n\nconst getSunriseTime = (weather) => {\n  const sunriseDate = weather.sys != undefined ? new Date(weather.sys.sunrise*1000) : ''\n  const sunriseTime = weather.sys != undefined ? {\n    hours: sunriseDate.getHours(),\n    minutes: sunriseDate.getMinutes()\n  } : ''\n  return sunriseTime\n}\n\nconst getSunsetTime = (weather) => {\n  const sunsetDate = weather.sys != undefined ? new Date(weather.sys.sunset*1000) : ''\n  const sunsetTime = weather.sys != undefined ? {\n    hours: sunsetDate.getHours(),\n    minutes: sunsetDate.getMinutes()\n  } : ''\n  return sunsetTime\n}\n\nexport const isDay = (weather) => {\n  const sunriseTime = getSunriseTime(weather)\n  const sunsetTime = getSunsetTime(weather)\n  const currentTime = getTime(weather)\n  if (weather != undefined){\n    if ((\"\" + currentTime.hours + currentTime.minutes) > (\"\" + sunriseTime.hours + sunriseTime.minutes) ||\n    (\"\" + currentTime.hours + currentTime.minutes) < (\"\" + sunsetTime.hours + sunsetTime.minutes)) {\n      return true\n    }\n  }\n  return false\n}","import { WiNightFog, WiDayFog, WiNightClear, WiNightAltCloudy, WiNightAltRainMix, WiDayCloudy, WiDayRainMix, WiDaySunny } from \"weather-icons-react\";\nimport { getTime } from '../helpers/getTime'\n\nconst WeatherIcon = (props) => {\n    //CONDITIONAL RENDERING\n    if (getTime(props.weather) > 6 && getTime(props.weather) < 21){\n      switch (props.weather.weather[0].main) {\n        case 'Rain':\n        case 'Thunderstorm':\n        case 'Drizzle':\n          return <WiDayRainMix size = {props.size} color = {props.color}/>\n        case 'Clear':\n          return <WiDaySunny size = {props.size} color = {props.color}/>\n        case 'Clouds':\n          return <WiDayCloudy size = {props.size} color = {props.color}/>\n          case 'Mist':\n          case 'Fog':\n          case 'Haze':\n          return <WiDayFog size = {props.size} color = {props.color}/>\n      }\n    }else {\n      switch (props.weather.weather[0].main) {\n        case 'Rain':\n        case 'Thunderstorm':\n        case 'Drizzle':\n          return <WiNightAltRainMix size = {props.size} color = {props.color}/>\n        case 'Clear':\n          return <WiNightClear size = {props.size} color = {props.color}/>\n        case 'Clouds':\n          return <WiNightAltCloudy size = {props.size} color = {props.color}/>\n        case 'Mist':\n        case 'Fog':\n        case 'Haze':\n          return <WiNightFog size = {props.size} color = {props.color}/>\n        }    \n    }\n    return <WiDayCloudy size = {props.size} color = {props.color}/>\n}\n\nexport default WeatherIcon","export const celsiusToFahrenheit = (temp) => {\n    return Math.round(temp * 9/5 + 32)\n}","import React, {useState} from 'react'\nimport { useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState'\nimport { dateBuilder } from '../helpers/dateBuilder'\nimport { capitalize } from '../helpers/capitalize'\nimport WeatherIcon from './WeatherIcon'\nimport { celsiusToFahrenheit } from '../helpers/celsiusToFahr'\nimport { getTemperature } from '../helpers/getTemperature'\n\nexport const WeatherInfo = (props) => {\n  const currentDate = new Date();\n  const [error, setError] = useState('La localidad ingresada es incorrecta.');\n  const { weatherState, scaleState } = useContext(GlobalContext)\n  const [weather, setWeather] = weatherState\n\tconst [scale, setScale] = scaleState\n\n  //Returns an object with current, max, and min temperature\n  const temperature = getTemperature(weather)\n\n  try {\n    return (\n  <div className = 'weather-info'>\n    <div className='location-box'>\n      <div className='location'>{ weather.name + ', ' + weather.sys.country }</div>\n      <div className='date'>{ dateBuilder(currentDate) }</div>\n    </div> \n    <div className = 'weather-box'>\n      <div className = 'currentTemp'>\n        <span>{ scale == 'Â°F' ? celsiusToFahrenheit(temperature.current) : temperature.current } { scale }</span>\n      </div>\n      <div style={{ opacity: '80%' }}>\n        <WeatherIcon size={ 175 } color= '#FFF' weather = { weather }/>\n      </div>\n      <div className='maxMinTemp'>\n        <div className = 'minTemp'>\n          <span>Min { scale == 'Â°F' ? celsiusToFahrenheit(temperature.min) : temperature.min } { scale }</span>\n        </div>\n        <div> / </div>\n        <div className = 'maxTemp'>\n          <span>Max { scale == 'Â°F' ? celsiusToFahrenheit(temperature.max) : temperature.max } { scale }</span>\n        </div>\n      </div> \n      <div className = 'weather'>\n        { capitalize(weather.weather[0].description) }\n      </div>\n    </div>\n  </div>)\n  } catch{\n    return <div className='error'>{ error }</div>\n  }\n}\n\nexport default WeatherInfo","export const capitalize = (string) => {\n  return string && string[0].toUpperCase() + string.slice(1);\n}","export const dateBuilder = (date) => {\n  const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']\n  const weekdays = ['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo']\n  const dateString = weekdays[date.getDay() - 1] + ' ' + date.getDate() + ' de ' + months[date.getMonth()] + ' del ' + date.getFullYear()\n  \n\treturn dateString\n}","export const getTemperature = (weather) => {\n    try{\n        const currentTemp = Math.round(weather.main.temp - 273.15)\n        const maxTemp = Math.round(weather.main.temp_max - 273)\n        const minTemp = Math.round(weather.main.temp_min - 273)\n        return {\n            current: currentTemp,\n            max: maxTemp,\n            min: minTemp\n        }\n    } catch{\n        return undefined\n    }\n}","import React from 'react'\nimport SearchBar from './SearchBar'\nimport { WeatherInfo } from './WeatherInfo'\n\nconst WeatherView = (props) => {\n    return (\n      <>\n        <SearchBar />\n        <WeatherInfo />\n    \t</>\n    )\n}\n\nexport default WeatherView\n\n","export default __webpack_public_path__ + \"static/media/app-logo.adec998e.png\";","import React from 'react'\nimport SearchBar from './SearchBar'\nimport { Image } from 'antd';\nimport logo from '../assets/app-logo.png'\nconst HomeScreen = (props) => {\n    return (\n      <div className = 'home-screen'>\n        <Image\n          width={ 200 }\n          src={logo}\n          preview={ false }\n        />\n        <div className='app-title'>\n          <h1>Weather App</h1>\n        </div>\n        <SearchBar />\n      </div>\n    )\n}\n\nexport default HomeScreen\n\n","import { isDay } from './getTime'\nexport const setBackground = (weather) => {\n  if (weather != undefined){\n    if (isDay(weather)){\n      return 'day'\n    } else if (!isDay(weather)){\n      return 'night'\n    }\n  }\n}","import React, { useContext } from 'react'\nimport { Menu, Dropdown, Button} from 'antd';\nimport { SettingOutlined, LeftOutlined } from '@ant-design/icons'\nimport { Typography } from 'antd'\nimport { GlobalContext } from '../context/GlobalState'\nimport { useLocation, Link } from 'react-router-dom'\nimport { useLocalStorage } from '../hooks/useLocalStorage'\nconst { Paragraph } = Typography;\n\n\n\n\nexport const Settings = (props) => {\t\n\tconst { scaleState, weatherState } = useContext(GlobalContext)\n\tconst [scale, setScale] = scaleState\n\tconst [weather, setWeather] = weatherState\n\tconst [selectedKey, setSelectedKey] = useLocalStorage('selectedScale', '1')\n\tconst location = useLocation()\n\t\n\tconst handleSelect = (item) => {\n\t\tif (item.key == '1'){\n\t\t\tsetScale('Â°C')\n\t\t\tsetSelectedKey('1')\n\t\t} else if (item.key == '2'){\n\t\t\tsetScale('Â°F')\n\t\t\tsetSelectedKey('2') \n\t\t}\n\t}\n\n\tconst handleClick = () => {\n\t\tsetWeather(undefined)\n\t}\n\n\tconst menu = (\n\t\t<Menu defaultSelectedKeys={selectedKey} selectable onSelect={handleSelect} theme='dark'>\n\t\t\t<Menu.Item key=\"1\">\n\t\t\t\tCelsius\n\t\t\t</Menu.Item>\n\t\t\t<Menu.Item key=\"2\">Fahrenheit</Menu.Item>\n\t\t</Menu>\n\t);\n\n\t\n  return (\n    <div className = 'settings' >\n\t\t<Link to='/'>\n\t\t\t<Button onClick = {handleClick} icon={<LeftOutlined  style={{ fontSize: '1.8rem' }}/>} type='link' disabled={location.pathname == '/weather' ? false : true}/>\n\t\t</Link>\n    \t<Dropdown.Button shape='circle' icon={<SettingOutlined style={{ fontSize: '1.8rem' }}/>} type='link'  overlay={menu} />\n    </div>\n  )\n}","import React, { useContext } from 'react'\nimport WeatherView from './components/WeatherView'\nimport HomeScreen from './components/HomeScreen'\nimport { GlobalContext } from './context/GlobalState'\nimport { setBackground } from './helpers/setBackground'\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom';\nimport { Settings } from './components/Settings'\n\nfunction App() { \n  const { weatherState } = useContext(GlobalContext)\n  const [weather, setWeather] = weatherState\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className= 'app'>\n        <main className={setBackground(weather)}>\n          <Settings />\n          <Switch>\n            <Route path='/' exact component={ HomeScreen } />\n            <Route path='/weather' component={ WeatherView } />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\nimport './styles/styles.css';\nimport 'antd/dist/antd.css';\nimport { WeatherProvider } from './context/GlobalState'\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherProvider>\n      <App />\n    </WeatherProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}